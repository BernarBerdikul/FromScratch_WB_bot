import os

import telebot
from telebot import types

from scratch_bot.core.models import Tariff
from scratch_bot.core.service import create_guest

TOKEN = os.getenv("telegram_bot_token")
API_KEY = os.getenv("telegram_bot_address")

# create a new Telegram Bot
bot = telebot.TeleBot(token=TOKEN)

# command description used in the "help" command
commands = {
    "start": "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
    "help": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö",
}


@bot.message_handler(commands=["help"])
def command_help(message):
    """generate help text out of the commands
    dictionary defined at the top"""
    chat_id = message.chat.id
    help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n"
    for key in commands:
        help_text += f"/{key}: {commands[key]}\n"
    bot.send_message(chat_id=chat_id, text=help_text)


@bot.message_handler(commands=["start"])
def send_welcome(message):
    chat_id: int = message.chat.id
    create_guest(message)
    try:
        tariffs = (
            Tariff.objects.only("title", "position", "price")
            .filter(enable=True)
            .order_by("position")
        )
        markup = types.InlineKeyboardMarkup()
        for tariff in tariffs:
            test_text: str = f"{tariff.position} {tariff.title} ({tariff.price} —Ä—É–±–ª–µ–π)"
            markup.add(types.InlineKeyboardButton(text=test_text, callback_data=tariff.id))
        bot.send_message(
            chat_id=chat_id,
            text="–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º —á—Ç–æ –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–∏ –Ω–∞—à–µ–≥–æ "
            "—É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è",
            reply_markup=markup,
        )
    except Exception:
        bot.send_message(chat_id=chat_id, text="–ü—Ä–æ—Å—Ç–∏—Ç–µ, –±–æ—Ç –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id: int = call.from_user.id
    tariff_id = call.data
    tariff = Tariff.objects.filter(id=tariff_id).first()
    if tariff:
        text: str = (
            f"{tariff.position} - {tariff.title}\n\n"
            f"{tariff.description}\n\n"
            f"–¶–µ–Ω–∞: {tariff.price} —Ä—É–±–ª–µ–π\n\n"
            f"–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: "
            f"{tariff.link}"
        )
    else:
        text: str = "–ù–∞–º –∂–∞–ª—å, –∫–∞–∂–µ—Ç—Å—è —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω :("
    bot.delete_message(chat_id=chat_id, message_id=call.message.id)
    bot.send_message(chat_id=chat_id, text=text)


@bot.message_handler(content_types=["text"])
def get_text_messages(message):
    bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è üòê")
